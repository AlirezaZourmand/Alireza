# -*- coding: utf-8 -*-
"""Q1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e8-BrRaG6keQo-r70x8bfOo8WLputlpi
"""

import re
class MrKrb:
    def __init__(self, dna):
        self.dna = dna
    def output(self, dna):
        new_dna = dna + dna[:10]
        return new_dna.replace('tt', 'o')
    def print_output(self):
        print(self.output(self.dna))
class SBob(MrKrb):
    def output(self):
        dna = super().output(self.dna)
        return self.merge_sort(str(len(dna)))
    def merge_sort(self, dna):
        if len(dna) <= 1:
            return dna
        mid = len(dna) // 2
        left_half = self.merge_sort(dna[:mid])
        right_half = self.merge_sort(dna[mid:])
        return self.merge(left_half, right_half)
    def print_output(self):
        print(self.output())
    def merge(self, left, right):
        result = ""
        i = j = 0
        while i < len(left) and j < len(right):
            if left[i:i + 2] < right[j:j + 2]:
                result += left[i:i + 2]
                i += 2
            else:
                result += right[j:j + 2]
                j += 2
        result += left[i:]
        result += right[j:]
        return result
class Squidward:
    def __init__(self, dna):
        self.dna = dna
    def print_output(self):
        modified_dna = self.linear_search(self.dna)
        modified_dna = re.sub(r'(.)\1\1', '(0_0)',modified_dna)
        print(modified_dna)
    def linear_search(self, dna):
        for i in range(len(dna)):
            if dna[i] == "x":
                return dna + str(i)
        return dna
dna = input()
rdna = dna[::-1]
if dna.startswith("m"):
    mrkrb = MrKrb(dna)
    mrkrb.print_output()
elif dna.startswith("s"):
    if dna[1]=="b":
        sbob = SBob(dna)
        sbob.print_output()
    else:
        squidward = Squidward(dna)
        squidward.print_output()
elif rdna.startswith("m"):
    mrkrb = MrKrb(rdna)
    mrkrb.print_output()
elif rdna.startswith("s"):
    if rdna[1]=="b":
        sbob = SBob(rdna)
        sbob.print_output()
    else:
        squidward = Squidward(rdna)
        squidward.print_output()
else:
    print("invalid input")